steps:
- checkout: self
  clean: true
  fetchDepth: 1
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '5.3.0'

# Fetch build dependencies
- powershell: |
    nuget install OpenBLAS -o $(Agent.ToolsDirectory)
    nuget install boost -o $(Agent.ToolsDirectory) -Version 1.60.0
    nuget install boost_unit_test_framework-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
    nuget install boost_program_options-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
    nuget install boost_random-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
    nuget install boost_serialization-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
    nuget install boost_math_c99-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
    nuget install OpenBLAS -o $(Agent.ToolsDirectory)

    mkdir -p $(Agent.ToolsDirectory)/boost_libs
    cp $(Agent.ToolsDirectory)/boost_program_options-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
    cp $(Agent.ToolsDirectory)/boost_math_c99-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
    cp $(Agent.ToolsDirectory)/boost_random-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
    cp $(Agent.ToolsDirectory)/boost_serialization-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
    cp $(Agent.ToolsDirectory)/boost_unit_test_framework-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
  displayName: 'Fetch build dependencies'

# Configure armadillo
- bash: |
    git clone --depth 1 https://github.com/mlpack/jenkins-conf.git conf

    curl -O http://www.ratml.org/misc/armadillo-8.400.0.tar.gz -o armadillo-8.400.0.tar.gz
    tar -xzvf armadillo-8.400.0.tar.gz

    cd armadillo-8.400.0/ && cmake $(CMakeGenerator) \
    -DBLAS_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
    -DLAPACK_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
    -DCMAKE_PREFIX:FILEPATH=../../armadillo \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_BUILD_TYPE=Release .
  displayName: 'Configure armadillo'

# Build armadillo
- task: MSBuild@1
  inputs:
    solution: 'armadillo-8.400.0/*.sln'
    msbuildLocationMethod: 'location'
    msbuildVersion: $(MSBuildVersion)
    configuration: 'Release'
    msbuildArchitecture: 'x64'
    msbuildArguments: /m /p:BuildInParallel=true
    clean: false
    maximumCpuCount: false
  displayName: 'Build armadillo'

# Configure mlpack
- powershell: |
    mkdir build
    cd build

    cmake $(CMakeGenerator) `
    $(CMakeArgs) `
    -DBLAS_LIBRARIES:FILEPATH=$(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\lib\x64\libopenblas.dll.a `
    -DLAPACK_LIBRARIES:FILEPATH=$(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\lib\x64\libopenblas.dll.a `
    -DARMADILLO_INCLUDE_DIR="..\armadillo-8.400.0\include" `
    -DARMADILLO_LIBRARY="..\armadillo-8.400.0\Release\armadillo.lib" `
    -DBOOST_INCLUDEDIR=$(Agent.ToolsDirectory)\boost.1.60.0.0\lib\native\include `
    -DBOOST_LIBRARYDIR=$(Agent.ToolsDirectory)\boost_libs `
    -DBUILD_JULIA_BINDINGS=OFF `
    -DCMAKE_BUILD_TYPE=Release ..
  displayName: 'Configure mlpack'

# Build mlpack
- task: MSBuild@1
  inputs:
    solution: 'build/*.sln'
    msbuildLocationMethod: 'location'
    msbuildVersion: $(MSBuildVersion)
    configuration: 'Release'
    msbuildArchitecture: 'x64'
    platform: 'x64'
    msbuildArguments: /m /p:BuildInParallel=true
    maximumCpuCount: false
    clean: false
  displayName: 'Build mlpack'

# Configure mlpack
- powershell: |
    cp $(Agent.ToolsDirectory)\boost_libs\*.* build\Release\
    cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\lib\x64\*.* build\Release\
    cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.* build\Release\
  displayName: 'Configure mlpack'

# Run tests via ctest.
- bash: |
    cd build
    CTEST_OUTPUT_ON_FAILURE=1 ctest -T Test -C Release .
  displayName: 'Run tests via ctest'

# Copy artifacts
- powershell: |
    mkdir exe-archive
    cp build\Release\*.exe exe-archive\
  displayName: 'Copy artifacts'

# Build artifacts archive
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'exe-archive\'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: $(ArchiveNoLibs)
    replaceExistingArchive: true
  displayName: 'Build artifacts'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'build\Release\'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: $(ArchiveLibs)
    replaceExistingArchive: true
  displayName: 'Build artifacts'

# Build MSI installer.
- powershell: |
    # Pull the documentation for the installer.
    try {
      (new-object net.webclient).DownloadFile(${env:JENKINS_DOC_DOWNLOAD},
      'dist\win-installer\jenkinsdoc.zip')
    }
    catch {
      Write-Output "Unable to download precompiled Doxygen documentation from Jenkins!"
    }
    try {
      (Add-Type -AssemblyName System.IO.Compression.FileSystem);
      [System.IO.Compression.ZipFile]::ExtractToDirectory(${env:JENKINS_DOC},
      'dist\win-installer\staging\doc')
    }
    catch {
      Write-Output "Unable to add doc to installer, skipping!"
    }
    # Preparing installer staging.
    mkdir dist\win-installer\staging\lib
    cp build\Release\*.lib dist\win-installer\staging\lib\
    cp build\Release\*.exp dist\win-installer\staging\lib\
    cp build\Release\*.dll dist\win-installer\staging\
    cp build\Release\*.exe dist\win-installer\staging\
    cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.dll dist\win-installer\staging\
    cp $(Agent.ToolsDirectory)\boost_libs\boost_unit_test_framework-vc*.dll dist\win-installer\staging\
    cp build\include\mlpack dist\win-installer\staging -recurse
    cp doc\examples dist\win-installer\staging -recurse
    cp src\mlpack\tests\data\german.csv dist\win-installer\staging\examples\sample-ml-app\sample-ml-app\data\
    # Check current git version or mlpack version.
    $ver = (Get-Content "src\mlpack\core\util\version.hpp" | where {$_ -like "*MLPACK_VERSION*"});
    $env:MLPACK_VERSION += $ver[0].substring($ver[0].length - 1, 1) + '.';
    $env:MLPACK_VERSION += $ver[1].substring($ver[1].length - 1, 1) + '.';
    $env:MLPACK_VERSION += $ver[2].substring($ver[2].length - 1, 1);

    if (Test-Path "src/mlpack/core/util/gitversion.hpp")
    {
      $ver = (Get-Content ${env:GIT_VERSION_FILE});
      $env:INSTALL_VERSION = $ver.Split('"')[1].Split(' ')[1];
    }
    else
    {
      $env:INSTALL_VERSION = $env:MLPACK_VERSION;
    }
    # Build the MSI installer.
    cd dist\win-installer\mlpack-win-installer
    heat dir ..\staging
        -cg HeatGenerated
        -dr INSTALLFOLDER
        -sreg
        -srd
        -var var.HarvestPath
        -ag
        -sfrag
        -out HeatGeneratedFileList.wxs
    candle
        -dHarvestPath=..\staging
        -dConfiguration=Release
        -dOutDir=bin\x64\Release\
        -dPlatform=x64
        -dProjectDir=.
        -dProjectExt=.wixproj
        -dProjectFileName=mlpack-win-installer.wixproj
        -dProjectName=mlpack-win-installer
        -dProjectPath=mlpack-win-installer.wixproj
        -dTargetDir=.\bin\x64\Release\
        -dTargetExt=.msi
        -dTargetFileName=mlpack-windows.msi
        -dTargetName=mlpack-windows
        -dTargetPath=.\bin\x64\Release\mlpack-windows.msi
        -out obj\x64\Release\
        -arch x64
        -ext "C:\Program Files (x86)\WiX Toolset v3.11\bin\\WixUIExtension.dll"
        Product.wxs HeatGeneratedFileList.wxs
    light
        -out .\bin\x64\Release\mlpack-%INSTALL_VERSION%.msi
        -pdbout .\bin\x64\Release\mlpack-windows.wixpdb
        -cultures:null
        -loc mlpack-localization.wxl
        -ext "C:\Program Files (x86)\WiX Toolset v3.11\bin\\WixUIExtension.dll"
        -contentsfile obj\x64\Release\mlpack-win-installer.wixproj.BindContentsFileListnull.txt
        -outputsfile obj\x64\Release\mlpack-win-installer.wixproj.BindOutputsFileListnull.txt
        -builtoutputsfile obj\x64\Release\mlpack-win-installer.wixproj.BindBuiltOutputsFileListnull.txt
        -wixprojectfile mlpack-win-installer.wixproj
        obj\x64\Release\Product.wixobj obj\x64\Release\HeatGeneratedFileList.wixobj
  displayName: 'Build MSI Windows installer'

# Publish artifacts to Azure Pipelines
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(ArchiveNoLibs)
    artifactName: $(ArchiveNoLibs)
  displayName: 'Publish artifacts no-libs'
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(ArchiveLibs)
    artifactName: $(ArchiveLibs)
  displayName: 'Publish artifacts complete'
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'build/Testing/'
    artifactName: 'Tests'
  displayName: 'Publish artifacts test results'
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'dist\win-installer\mlpack-win-installer\bin\x64\Release\*.msi'
    artifactName: mlpack-windows-installer
  displayName: 'Publish Windows MSI installer'

# Publish test results to Azure Pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFormat: cTest
    testResultsFiles: build/Testing/*/Test.xml
    failTaskOnFailedTests: true
  displayName: 'Publish tests'
